syntax = "proto3";

package component;

option java_package = "com.silabs.ss.framework.uc.core.internal.cache";
option java_outer_classname = "RawComponentCache";

// Generated with Protoc 3.15.5

// This proto file describes the cached component format for storing the
// UcComponent data in a form that is faster to read in in bulk. It also
// includes two additional fields, filename and timestamp, that are used
// by caching to determine which file maps to which data, and when/if that
// cache is invalidated.
// In other respects, this maps the data stored in UcComponent such that it
// will be part of a single big blob (so one I/O operation) as well as it
// can take a few liberties to encode some stuff otherwise missing from the .slcc
// data to help speed up reading.

// Remember, this is NOT a metadata format. This has only ONE purpose -- speed
// up loading the UcFramework, with the idea that it is faster to load one single
// thing in a very compact format whose data may be better tuned to being copied
// into a UcComponent object than it is to parse the human readable format across
// the entire sdk folder.

// Compile this with, assuming you are running protoc from one below the studio super
// repo (make sure it comes from the same version that is currently referenced by this project!)

// For studio repo:
// ./protoc.exe -I=studio/framework_uc/plugins/com.silabs.ss.framework.uc.core/src --java_out=studio/framework_uc/plugins/com.silabs.ss.framework.uc.core/src studio/framework_uc/plugins/com.silabs.ss.framework.uc.core/src/com/silabs/ss/framework/uc/core/internal/cache/component_cache.proto

// For studio_dev repo
// ./protoc.exe -I=studio_dev/repos/framework_uc/plugins/com.silabs.ss.framework.uc.core/src --java_out=studio_dev/repos/framework_uc/plugins/com.silabs.ss.framework.uc.core/src studio_dev/repos/framework_uc/plugins/com.silabs.ss.framework.uc.core/src/com/silabs/ss/framework/uc/core/internal/cache/component_cache.proto

// ------------------------- IMPORTANT -----------------------
// If recompiling, make sure you re-add @SuppressWarnings({"unused", "unchecked"})
// to the RawComponentCache.
// 
// ComponentCache has a version static field. Make sure you bump that whenever
// you modify and recompile this proto file.
// -----------------------------------------------------------
// Finally, the relative path to this from studio super repo will be
// framework_uc/plugins/com.silabs.ss.framework.uc.core/src/com/silabs/ss/framework/uc/core/internal/cache.
// Added here separately so it is easier to refer to via a wide array of command
// line options if other operations need to be done on the file.

message Cache {
  // listing of all components in the cache.
  // Whilst the components themselves should not convert over immediately and
  // instead wait for the parser so they can benefit from being converted
  // in a multithreaded way, this list should most definitely be transferred
  // to a concurrent capable storage system for proper safe lookup in a
  // multithreaded environment.
  repeated Component components = 1;
  // the version number of this cache. This refers to how the program itself
  // handles versions -- if the program is detected to see a cache version
  // smaller than what it is currently designed to handle, it can either match
  // to a different parser, or discard the entire cache as invalid. This allows
  // for significant changes to how components are stored down the line as
  // long as the Cache object remains and the version value remains.
  uint32 version = 2;
}

message Component {
  // last modified time for this cache entry. If the parser detects
  // the .slcc file is more recent, this should invalidate the entry.
  fixed64 mod_time = 1;
  // filename for this entry. The filenames should be relative to the root
  // of the sdk to ensure uniqueness without regard to physical position
  // of the sdk on disk.
  string file_name = 2;

  // unique name of this component. Populates the ComponentId field as
  // well as the name field.
  string id = 3;
  string pretty_name = 4;
  string category = 5;
  string description = 6;
  repeated string tag = 7;
  int32 feature_level = 8;
  // an integer referring to a quality enumeration. It is up to the client to
  // keep the mapping between numbers and actual enumerated quality classes
  // consistent.
  fixed32 quality = 9;
  repeated ApiRule provided = 10;
  repeated ApiRule required = 11;
  repeated Source sources = 12;
  repeated ResolvedInclude includes = 13;
  repeated Macro macros = 14;
  repeated ConfigFile config_files = 15;
  repeated TemplateFile template_files = 16;
  repeated TemplateContribution template_contributions = 17;
  repeated Library libraries = 18;
  string packaged_as = 19;
  // if instance prefix is empty, not insta
  string instance_prefix = 20;
  repeated Filename validation_scripts = 21;
  repeated Recommended recommended = 22;
  repeated Filename validation_library = 23;
  repeated ToolchainSetting toolchain_settings = 24;
  repeated ConfigFileOverrider config_overriders = 25;
  // Reuse of entry -- all ui hints are marshalls as String entries, no condition.
  repeated Entry ui_hints = 26;
  repeated Doc docs = 27;
  string author = 28;
  repeated Conflicts conflicts = 29;
  Metadata meta = 30;
  repeated Source otherFiles = 31;
 
  // Reminder -- we are purposefully omitting
  // 1) IMetaSource, - can be added easily from the filename the parser
  //    will already have.
  // 2) apiMap - auto generated from total list of provided/requires.
}


// ----- Metadata specific to studio. Any other metadata isn't even parsed,
//       let alone should be stored in the cache.
message Metadata {
  Board board = 1;
  Device device = 2;
  Kit kit = 3;
  Toolchain toolchain = 4;
  Pintool pintool = 5;
}

message Board {
  string revision = 1;
  string variant = 2;
  string pn = 3;
}

message MemorySegment {
  string name = 1;
  sint32 start = 2;
  sint32 size = 3;
  sint32 page_size = 4;
  string type = 5;
}

message Device {
  string opn = 1;
  bool defaultDevice = 2;
  repeated MemorySegment memory = 3;
}

message Kit {
  string opn = 1;
  string revision = 2;
  string variant = 3;
  string pn = 4;
}

message Toolchain {
  string id = 1;
  string variant = 2;
}

message Pintool {
  repeated string peripheral = 1;
}

// ----- End of Metadata objects.

message Library {
  string lib = 1;
  SourceEntry lib_file = 2;
  // 0 = sdk, 1 = system.
  sint32 type = 3;
  Condition condition = 4;
}

// If docName/docSet appear, this is a docs.silabs.com link.
// if uri appears, this is an external/local file link, depending on the uri
// (if it is http(s):// or file://
message Doc {
  string docName = 1;
  string docSet = 2;
  Condition condition = 3;
  string uri = 4;
}

message ApiRule {
  string api = 1;
  Condition condition = 2;
  bool shared = 3;
}

message Recommended {
  string api = 1;
  repeated string instances = 2;
  Condition condition = 3;
}

message Condition {
  repeated string api = 1;
}

message Source {
  SourceEntry source_entry = 1;
  Condition condition = 2;
  // Protobuf has no concept of nulls. So whether
  // to interpret transfer_ownership being empty as 'transfer with none'
  // vs 'no transfer' requires additional data.
  bool do_transfer = 3;
   
  // empty = ownership transfer no special directory
  // something = ownership transfer with special directory
  string transfer_ownership = 4;
}

message SourceEntry {
  string projectFileName = 1;
  string relative_path = 2;
  string resolved_path = 3;
}

message TemplateFile {
  Filename path = 1;
  bool exported = 2;
}

message Filename {
  string path = 1;
  Condition condition = 2;
  // optional
  string name = 3;
}

message Overrider {
  string id = 1;
  string comp_name = 2;
  string instance_name = 3;
  Condition condition = 4;
}

message ConfigFileOverrider {
	ConfigFile data = 1;
	Overrider overrider = 2;
}

message ConfigFile {
  // only non-UcInstancedComponents are allowed in the cache. In those
  // cases, the filename includes the {{instance}} part, if available
  Filename source = 1;
  string directory = 2;
  // a separate sdk name which MAY be used for instantiable components. It
  // still shares the same parent and condition as the source filename.
  string sdkName = 3;
  string override_id = 4;
}

message ResolvedInclude {
  repeated Source files = 1;
  string directory = 2;
  string category = 3;
  Condition condition = 4;
}

message Macro {
  string name = 1;
  string value = 2;
  Condition condition = 3;
}

message ToolchainSetting {
  string option = 1;
  string value = 2;
  Condition condition = 3;
}

message TemplateContribution {
  string name = 1;
  sint32 priority = 2;
  Condition condition = 3;
  DynamicValue value = 4;
}

message Entry {
  string key = 1;
  DynamicValue value = 2;
}

message DynamicValue {
  enum ValueType {
    STRING = 0;
    INT = 1;
    MAP = 2;
    BOOLEAN = 3;
    LIST = 4;
  }

  ValueType choice = 1;
  // value can be of four types. No matter what, one value
  // will be non null.
  string strValue = 2;
  sint32 intValue = 3;
  repeated Entry mapValue = 4;
  bool boolValue = 5;
  repeated DynamicValue listValue = 6;
}

message Conflicts {
  string apiId = 1;
  Condition condition = 2;
}
